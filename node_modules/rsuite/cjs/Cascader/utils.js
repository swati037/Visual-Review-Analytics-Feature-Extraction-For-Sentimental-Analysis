"use strict";

exports.__esModule = true;
exports.getColumnsAndPaths = getColumnsAndPaths;
exports.usePaths = usePaths;
exports.getParentMap = getParentMap;
exports.getPathTowardsItem = getPathTowardsItem;

var _react = require("react");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Calculate columns to be displayed:
 *
 * - Every ancestor level of activeItem should be displayed
 * - The level that activeItem is at should be displayed
 * - If activeItem is a parent node, its child level should be displayed
 *
 * @param items
 * @param value
 * @param options
 * @returns
 */
function getColumnsAndPaths(items, pathTarget, options) {
  var getParent = options.getParent,
      getChildren = options.getChildren;

  if (!pathTarget) {
    return {
      columns: [items],
      path: []
    };
  }

  var columns = [];
  var path = [pathTarget];
  var children = getChildren(pathTarget);

  if (children && children.length > 0) {
    columns.unshift(children);
  }

  for (var parent = getParent(pathTarget); !!parent; parent = getParent(parent)) {
    var _getChildren;

    columns.unshift((_getChildren = getChildren(parent)) !== null && _getChildren !== void 0 ? _getChildren : []);
    path.unshift(parent);
  }

  columns.unshift(items);
  return {
    columns: columns,
    path: path
  };
}

/**
 * Caculate following 3 things
 *
 * - The columns of items to be displayed
 * - The path towards the current focused item
 * - The path towards the current selected item (referred to by Cascader's value)
 *
 * @param params
 * @returns
 */
function usePaths(_ref) {
  var data = _ref.data,
      activeItem = _ref.activeItem,
      selectedItem = _ref.selectedItem,
      getParent = _ref.getParent,
      getChildren = _ref.getChildren;
  var pathTowardsSelectedItem = (0, _react.useMemo)(function () {
    return getPathTowardsItem(selectedItem, getParent);
  }, [getParent, selectedItem]);

  var _useMemo = (0, _react.useMemo)(function () {
    return getColumnsAndPaths(data, activeItem, {
      getParent: getParent,
      getChildren: getChildren
    });
  }, [data, activeItem, getParent, getChildren]),
      columnsToDisplay = _useMemo.columns,
      pathTowardsActiveItem = _useMemo.path;

  return {
    columnsToDisplay: columnsToDisplay,
    pathTowardsSelectedItem: pathTowardsSelectedItem,
    pathTowardsActiveItem: pathTowardsActiveItem
  };
}
/**
 * Returns a WeakMap that maps each item in `items` to its parent
 * indicated by `getChildren` function
 */


function getParentMap(items, getChildren) {
  var map = new WeakMap();

  for (var queue = [].concat(items); queue.length > 0;) {
    var _item = queue.shift();

    var children = getChildren(_item);

    if (children) {
      for (var _iterator = _createForOfIteratorHelperLoose(children), _step; !(_step = _iterator()).done;) {
        var child = _step.value;
        map.set(child, _item);
        queue.push(child);
      }
    }
  }

  return map;
}
/**
 * Returns an array indicating the hirearchy path from root towards `target` item
 */


function getPathTowardsItem(target, getParent) {
  if (!target) return [];
  var path = [target];

  for (var parent = getParent(target); !!parent; parent = getParent(parent)) {
    path.unshift(parent);
  }

  return path;
}